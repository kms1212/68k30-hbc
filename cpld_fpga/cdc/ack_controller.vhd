-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2009 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II Version 9.0 (Build Build 132 02/25/2009)
-- Created on Sat Oct 21 17:38:46 2023

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;


--  Entity Declaration

ENTITY ack_controller IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		CLK : IN STD_LOGIC;
		nMDV : IN STD_LOGIC;
		nCDV : IN STD_LOGIC;
		nFMCS : IN STD_LOGIC;
		nSTERM : OUT STD_LOGIC;
		nDSACK : OUT STD_LOGIC_VECTOR(1 downto 0)
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	
END ack_controller;


--  Architecture Body

ARCHITECTURE ack_controller_architecture OF ack_controller IS
	
BEGIN
	PROCESS (CLK) IS
		VARIABLE term_sent : STD_LOGIC := '0';
		VARIABLE flash_latency_counter : STD_LOGIC_VECTOR(1 downto 0);
		VARIABLE flash_data_valid : STD_LOGIC := '0';
	BEGIN
		IF RISING_EDGE(CLK) THEN
			IF (nFMCS = '0') THEN
				IF (flash_latency_counter /= "11") THEN
					flash_latency_counter :=
						STD_LOGIC_VECTOR(UNSIGNED(flash_latency_counter) + 1);
					flash_data_valid := '0';
				ELSE
					flash_latency_counter := "00";
					flash_data_valid := '1';
				END IF;
			ELSE
				flash_latency_counter := "00";
				flash_data_valid := '0';
			END IF;
		ELSIF FALLING_EDGE(CLK) THEN
			IF (nMDV = '0' OR nCDV = '0' OR flash_data_valid = '1') THEN
				IF (term_sent = '0') THEN
					nSTERM <= '0';
					term_sent := '1';
				ELSE
					nSTERM <= '1';
					term_sent := '0';
				END IF;
			ELSE
				nSTERM <= '1';
				term_sent := '0';
			END IF;
		END IF;
	END PROCESS;
END ack_controller_architecture;
